{"version":3,"sources":["components/Header.js","components/Post.js","components/SubTitle.js","helpers/fetchData.js","helpers/inputs.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","value","inputValue","placeholder","onChange","filterPosts","target","Post","togglePosts","setState","showPostBody","state","this","userId","postTitle","postBody","onClick","postId","Component","SubTitle","display","toggleDisplay","fetchData","fetch","inputs","input","allInputs","includes","split","filter","item","index","indexOf","map","string","push","Number","console","log","App","myPost","posts","post","forEach","number","toggleDisplayAllPosts","displayAllPosts","toggleDisplayMyPosts","displayMyPosts","then","res","json","key","id","body","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e6ee5d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div className='header'>\r\n            <h1>{props.title}</h1>\r\n            <h3>My ID:\r\n                <input\r\n                    className='input-filterPosts'\r\n                    value={props.inputValue}\r\n                    placeholder='Please select between 1 and 10'\r\n                    onChange={(inputValue) => props.filterPosts(inputValue.target.value)}\r\n                />\r\n            </h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport './Post.css';\r\n\r\nclass Post extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showPostBody: false\r\n        }\r\n    }\r\n    togglePosts = () => {\r\n        this.setState({ showPostBody: !this.state.showPostBody });\r\n    }\r\n\r\n    render() {\r\n        const { userId, postTitle, postBody } = this.props;\r\n        return (\r\n            <div className='post'>\r\n                <div className='post-title'>\r\n                    <h3>{postTitle}</h3>\r\n                    <div className={`btn-showPostBody ${this.state.showPostBody ? 'up' : 'down'}`}\r\n                        onClick={this.togglePosts}\r\n                    />\r\n                </div>\r\n                {\r\n                    this.state.showPostBody &&\r\n                    <div className='post-body'>\r\n                        <p>{postBody}</p>\r\n                        <p>Posted by user: {userId}</p>\r\n                        <p>Reference number:  {this.props.postId}</p>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\nimport './SubTitle.css';\r\n\r\nfunction SubTitle(props) {\r\n    return (\r\n        <div className='subTitle'>\r\n            <h2>{props.title}</h2>\r\n            <div className={`btn-displayPosts ${props.display ? 'up' : 'down'}`}\r\n                onClick={props.toggleDisplay}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SubTitle;","function fetchData() {\r\n    return (\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n    );\r\n}\r\n\r\nexport default fetchData;","const inputs = (inputValue) => {\r\n    const input = []\r\n    const allInputs = inputValue.includes(\",\") ? inputValue.split(\",\") : [inputValue];\r\n    \r\n    allInputs.filter((item, index) => allInputs.indexOf(item) === index)\r\n        .map(string => input.push(Number(string)));\r\n\r\n    console.log(\"input\", input);\r\n    return input;\r\n\r\n}\r\n\r\nexport default inputs;","import React, { Component } from 'react';\r\nimport Header from './components/Header';\r\nimport Post from './components/Post';\r\nimport SubTitle from './components/SubTitle';\r\nimport fetchData from './helpers/fetchData';\r\nimport inputs from './helpers/inputs';\r\n\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            posts: [],\r\n            myPost: [],\r\n            inputValue: '',\r\n            displayAllPosts: false,\r\n            displayMyPosts: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchData()\r\n            .then(res => res.json())\r\n            .then(posts => this.setState({ posts }))\r\n    }\r\n\r\n    filterPosts = (inputValue) => {\r\n        const myPost = [];\r\n        const input = inputs(inputValue);\r\n        this.state.posts.filter(post => {\r\n            return input.forEach(number => {\r\n                return post.userId === number ? myPost.push(post) : null\r\n            });\r\n        });\r\n        this.setState({ inputValue, myPost })\r\n    };\r\n\r\n    toggleDisplayAllPosts = () => {\r\n        this.setState({ displayAllPosts: !this.state.displayAllPosts })\r\n    }\r\n\r\n    toggleDisplayMyPosts = () => {\r\n        this.setState({ displayMyPosts: !this.state.displayMyPosts })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='app'>\r\n                <Header title='JSON-Placeholder Posts' inputValue={this.state.inputValue} filterPosts={this.filterPosts} />\r\n                <div className='app-body'>\r\n                    <div className='all-posts'>\r\n                        <SubTitle title='All Posts' display={this.state.displayAllPosts} toggleDisplay={this.toggleDisplayAllPosts} />\r\n                        { \r\n                            this.state.displayAllPosts && this.state.posts.map(post => {\r\n                                return (\r\n                                    <Post\r\n                                        key={post.id}\r\n                                        userId={post.userId}\r\n                                        postId={post.id}\r\n                                        postTitle={post.title}\r\n                                        postBody={post.body}\r\n                                    />\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className='my-posts'>\r\n                        <SubTitle title='My Posts' display={this.state.displayMyPosts} toggleDisplay={this.toggleDisplayMyPosts} />\r\n                        {\r\n                            this.state.displayMyPosts && this.state.myPost.map(post => {\r\n                                return (\r\n                                    <Post\r\n                                        key={post.id}\r\n                                        userId={post.userId}\r\n                                        postId={post.id}\r\n                                        postTitle={post.title}\r\n                                        postBody={post.body}\r\n                                    />\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}